name: Create VPS with VNC and Sunshine

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

env:
  VPS_NAME: vps-project-1757394723326
  GITHUB_TOKEN_VPS: ${{ secrets.GH_TOKEN }}

jobs:
  deploy:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: write

    steps:
    - name: ‚¨áÔ∏è Checkout source
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
    
    - name: ‚öôÔ∏è Setup User + RDP
      run: |
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        net user datlohe Dat@123456 /add
        net localgroup administrators datlohe /add
        [span_0](start_span)Write-Host "‚úÖ User: datlohe / Password: Dat@123456"[span_0](end_span)

    - name: üñ•Ô∏è C√†i ƒë·∫∑t v√† ch·∫°y TightVNC, noVNC, Cloudflared
      shell: pwsh
      run: |
        [span_1](start_span)Write-Host "üì• Installing TightVNC, noVNC, and Cloudflared..."[span_1](end_span)
        
        try {
          Write-Host "üì• Installing TightVNC..."
          [span_2](start_span)Invoke-WebRequest -Uri "https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi" -OutFile "tightvnc-setup.msi" -TimeoutSec 60[span_2](end_span)
          Write-Host "‚úÖ TightVNC downloaded"
          
          [span_3](start_span)Start-Process msiexec.exe -Wait -ArgumentList '/i tightvnc-setup.msi /quiet /norestart ADDLOCAL="Server" SERVER_REGISTER_AS_SERVICE=1 SERVER_ADD_FIREWALL_EXCEPTION=1 SET_USEVNCAUTHENTICATION=1 VALUE_OF_USEVNCAUTHENTICATION=1 SET_PASSWORD=datlohehe SET_ACCEPTHTTPCONNECTIONS=1 VALUE_OF_ACCEPTHTTPCONNECTIONS=1 SET_ALLOWLOOPBACK=1 VALUE_OF_ALLOWLOOPBACK=1'[span_3](end_span)
          Write-Host "‚úÖ TightVNC installed"
          
          Write-Host "üîß Enabling loopback connections in TightVNC registry..."
          Set-ItemProperty -Path "HKLM:\SOFTWARE\TightVNC\Server" -Name "AllowLoopback" -Value 1 -ErrorAction SilentlyContinue
          
          Write-Host "üîç Stopping any existing tvnserver processes..."
          [span_4](start_span)Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue[span_4](end_span)
          [span_5](start_span)Stop-Service -Name "tvnserver" -Force -ErrorAction SilentlyContinue[span_5](end_span)
          Start-Sleep -Seconds 5
          
          Write-Host "üîç Checking for port 5900 conflicts..."
          $portCheck = netstat -aon | [span_6](start_span)FindStr :5900[span_6](end_span)
          if ($portCheck) {
            Write-Host "‚ö†Ô∏è Port 5900 is already in use: $portCheck"
            Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 5
          }
          
          [span_7](start_span)Write-Host "üöÄ Starting TightVNC server..."[span_7](end_span)
          [span_8](start_span)Start-Process -FilePath "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run -localhost no" -WindowStyle Hidden -RedirectStandardOutput "vnc_start.log" -RedirectStandardError "vnc_error.log"[span_8](end_span)
          Start-Sleep -Seconds 40
          Get-Content "vnc_start.log" -ErrorAction SilentlyContinue | [span_9](start_span)Write-Host[span_9](end_span)
          Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | [span_10](start_span)Write-Host[span_10](end_span)
          
          [span_11](start_span)netsh advfirewall firewall add rule name="Allow VNC 5900" dir=in action=allow protocol=TCP localport=5900[span_11](end_span)
          [span_12](start_span)netsh advfirewall firewall add rule name="Allow noVNC 6080" dir=in action=allow protocol=TCP localport=6080[span_12](end_span)
          [span_13](start_span)Write-Host "‚úÖ Firewall rules added"[span_13](end_span)
          
          [span_14](start_span)Write-Host "üì• Installing Python dependencies for noVNC and websockify..."[span_14](end_span)
          [span_15](start_span)Write-Host "üîç Checking Python and pip versions..."[span_15](end_span)
          python --version | [span_16](start_span)Write-Host[span_16](end_span)
          python -m pip --version | [span_17](start_span)Write-Host[span_17](end_span)
          
          $maxPipAttempts = 5
          for ($i = 1; $i -le $maxPipAttempts; $i++) {
            try {
              python -m pip install --upgrade pip --timeout 60 2>&1 | [span_18](start_span)Out-File -FilePath "pip_install.log" -Append -Encoding UTF8[span_18](end_span)
              pip install --force-reinstall numpy novnc websockify==0.13.0 --timeout 60 2>&1 | [span_19](start_span)Out-File -FilePath "pip_install.log" -Append -Encoding UTF8[span_19](end_span)
              [span_20](start_span)Write-Host "‚úÖ Python dependencies installed"[span_20](end_span)
              break
            } catch {
              [span_21](start_span)Write-Host "‚ö†Ô∏è Pip install attempt $i/$maxPipAttempts failed: $_"[span_21](end_span)
              Get-Content "pip_install.log" -ErrorAction SilentlyContinue | [span_22](start_span)Write-Host[span_22](end_span)
              if ($i -eq $maxPipAttempts) {
                [span_23](start_span)Write-Host "‚ùå Failed to install Python dependencies"[span_23](end_span)
                exit 1
              }
              Start-Sleep -Seconds 10
            }
          }
          
          [span_24](start_span)Write-Host "üîç Checking noVNC installation via pip..."[span_24](end_span)
          try {
            $novncInfo = pip show novnc
            [span_25](start_span)Write-Host "üìú noVNC package info:"[span_25](end_span)
            [span_26](start_span)Write-Host $novncInfo[span_26](end_span)
            [span_27](start_span)$novncPath = ($novncInfo | Select-String "Location: (.*)").Matches.Groups[1].Value + "\novnc"[span_27](end_span)
            if (Test-Path "$novncPath") {
              dir $novncPath -Recurse | [span_28](start_span)Write-Host[span_28](end_span)
              if (-not (Test-Path "$novncPath/vnc.html")) {
                [span_29](start_span)Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"[span_29](end_span)
                [span_30](start_span)Write-Host "üîÑ Falling back to GitHub download..."[span_30](end_span)
                [span_31](start_span)$novncVersion = "v1.6.0"[span_31](end_span)
                [span_32](start_span)$maxDownloadAttempts = 5[span_32](end_span)
                for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                  try {
                    [span_33](start_span)Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."[span_33](end_span)
                    [span_34](start_span)Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue[span_34](end_span)
                    [span_35](start_span)$novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"[span_35](end_span)
                    [span_36](start_span)Write-Host "üîó Using URL: $novncUrl"[span_36](end_span)
                    [span_37](start_span)$response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru[span_37](end_span)
                    [span_38](start_span)Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"[span_38](end_span)
                    Expand-Archive -Path "noVNC.zip" -DestinationPath "." -[span_39](start_span)Force[span_39](end_span)
                    [span_40](start_span)Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force[span_40](end_span)
                    [span_41](start_span)Write-Host "‚úÖ noVNC downloaded and extracted"[span_41](end_span)
                    $novncPath = "noVNC"
                    break
                  } catch {
                    [span_42](start_span)Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"[span_42](end_span)
                    if ($i -eq $maxDownloadAttempts) {
                      [span_43](start_span)Write-Host "‚ùå Failed to download noVNC"[span_43](end_span)
                      [span_44](start_span)exit 1[span_44](end_span)
                    }
                    Start-Sleep -Seconds 10
                  }
                }
              }
            } else {
              [span_45](start_span)Write-Host "‚ùå noVNC directory does not exist, falling back to GitHub download..."[span_45](end_span)
              $novncVersion = "v1.6.0"
              $maxDownloadAttempts = 5
              for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                try {
                  [span_46](start_span)Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."[span_46](end_span)
                  [span_47](start_span)Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue[span_47](end_span)
                  [span_48](start_span)$novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"[span_48](end_span)
                  [span_49](start_span)Write-Host "üîó Using URL: $novncUrl"[span_49](end_span)
                  [span_50](start_span)$response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru[span_50](end_span)
                  [span_51](start_span)Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"[span_51](end_span)
                  Expand-Archive -Path "noVNC.zip" -DestinationPath "." -[span_52](start_span)Force[span_52](end_span)
                  [span_53](start_span)Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force[span_53](end_span)
                  [span_54](start_span)Write-Host "‚úÖ noVNC downloaded and extracted"[span_54](end_span)
                  $novncPath = "noVNC"
                  break
                } catch {
                  [span_55](start_span)Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"[span_55](end_span)
                  if ($i -eq $maxDownloadAttempts) {
                    [span_56](start_span)Write-Host "‚ùå Failed to download noVNC"[span_56](end_span)
                    [span_57](start_span)exit 1[span_57](end_span)
                  }
                  Start-Sleep -Seconds 10
                }
              }
            }
          } catch {
            [span_58](start_span)Write-Host "‚ö†Ô∏è Failed to check noVNC package via pip, falling back to GitHub download..."[span_58](end_span)
            $novncVersion = "v1.6.0"
            $maxDownloadAttempts = 5
            for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
              try {
                [span_59](start_span)Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."[span_59](end_span)
                [span_60](start_span)Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue[span_60](end_span)
                [span_61](start_span)$novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"[span_61](end_span)
                [span_62](start_span)Write-Host "üîó Using URL: $novncUrl"[span_62](end_span)
                [span_63](start_span)$response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru[span_63](end_span)
                [span_64](start_span)Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"[span_64](end_span)
                Expand-Archive -Path "noVNC.zip" -DestinationPath "." -[span_65](start_span)Force[span_65](end_span)
                [span_66](start_span)Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force[span_66](end_span)
                [span_67](start_span)Write-Host "‚úÖ noVNC downloaded and extracted"[span_67](end_span)
                $novncPath = "noVNC"
                break
              } catch {
                [span_68](start_span)Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"[span_68](end_span)
                if ($i -eq $maxDownloadAttempts) {
                  [span_69](start_span)Write-Host "‚ùå Failed to download noVNC"[span_69](end_span)
                  [span_70](start_span)exit 1[span_70](end_span)
                }
                [span_71](start_span)Start-Sleep -Seconds 10[span_71](end_span)
              }
            }
          }
          
          [span_72](start_span)Write-Host "üîç Checking noVNC directory structure..."[span_72](end_span)
          if (-not (Test-Path "$novncPath/vnc.html")) {
            [span_73](start_span)Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"[span_73](end_span)
            [span_74](start_span)exit 1[span_74](end_span)
          }
          
          [span_75](start_span)Write-Host "üîç Checking for port 6080 conflicts..."[span_75](end_span)
          $portCheck = netstat -aon | [span_76](start_span)FindStr :6080[span_76](end_span)
          if ($portCheck) {
            [span_77](start_span)Write-Host "‚ö†Ô∏è Port 6080 is already in use: $portCheck"[span_77](end_span)
            [span_78](start_span)Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue[span_78](end_span)
            Start-Sleep -Seconds 5
          }
          
          [span_79](start_span)Write-Host "üöÄ Starting websockify..."[span_79](end_span)
          [span_80](start_span)Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru[span_80](end_span)
          Start-Sleep -Seconds 15
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | [span_81](start_span)Write-Host[span_81](end_span)
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | [span_82](start_span)Write-Host[span_82](end_span)
          
          Write-Host "üì• Installing Cloudflared..."
          [span_83](start_span)Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe" -TimeoutSec 60[span_83](end_span)
          [span_84](start_span)Write-Host "‚úÖ Cloudflared downloaded"[span_84](end_span)
          
          [span_85](start_span)Write-Host "üåê Starting Cloudflared tunnel for VNC..."[span_85](end_span)
          [span_86](start_span)Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared_vnc.log" -WindowStyle Hidden[span_86](end_span)
          Start-Sleep -Seconds 40

        } catch {
          [span_87](start_span)Write-Host "‚ö†Ô∏è VNC Setup failed: $_"[span_87](end_span)
          exit 1
        }
        
    - name: üåû C√†i Sunshine (Portable)
      run: |
        [span_88](start_span)Invoke-WebRequest -Uri "https://github.com/LizardByte/Sunshine/releases/download/v0.23.1/sunshine-windows.zip" -OutFile "sunshine.zip"[span_88](end_span)
        [span_89](start_span)Expand-Archive sunshine.zip -DestinationPath "C:\Sunshine" -Force[span_89](end_span)
        [span_90](start_span)cd C:\Sunshine[span_90](end_span)
        [span_91](start_span)Write-Host "‚úÖ Sunshine Portable ƒë√£ gi·∫£i n√©n!"[span_91](end_span)
        
        [span_92](start_span)New-NetFirewallRule -DisplayName "Sunshine TCP 47984" -Direction Inbound -Protocol TCP -LocalPort 47984 -Action Allow[span_92](end_span)
        [span_93](start_span)New-NetFirewallRule -DisplayName "Sunshine TCP 47989" -Direction Inbound -Protocol TCP -LocalPort 47989 -Action Allow[span_93](end_span)
        [span_94](start_span)New-NetFirewallRule -DisplayName "Sunshine UDP 48010" -Direction Inbound -Protocol UDP -LocalPort 48010 -Action Allow[span_94](end_span)

        [span_95](start_span)Start-Process -FilePath "C:\Sunshine\sunshine.exe" -ArgumentList "-config C:\Sunshine\config\sunshine.conf" -NoNewWindow[span_95](end_span)
        
    - name: ‚òÅÔ∏è C√†i Cloudflared (Tunnel cho Sunshine)
      run: |
        if (-not (Test-Path ".\cloudflared.exe")) {
            [span_96](start_span)Invoke-WebRequest https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe -OutFile cloudflared.exe[span_96](end_span)
        }
        [span_97](start_span)Write-Host "‚úÖ Cloudflared t·∫£i xong!"[span_97](end_span)
        [span_98](start_span)Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url tcp://localhost:47984" -NoNewWindow -RedirectStandardOutput "cloudflared_sunshine.log" -RedirectStandardError "cloudflared_sunshine_error.log"[span_98](end_span)

    - name: ‚è≥ Gi·ªØ VPS ch·∫°y v√† l·∫•y links
      shell: pwsh
      run: |
        [span_99](start_span)$totalMinutes = 330[span_99](end_span)
        [span_100](start_span)$restartCheckpoint = 320[span_100](end_span)
        [span_101](start_span)$healthCheckInterval = 15[span_101](end_span)
        
        [span_102](start_span)Write-Host "üöÄ VPS Session Started - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"[span_102](end_span)
        
        $vncReady = $false
        for ($i = 1; $i -le 30; $i++) {
          try {
            [span_103](start_span)$tcpConnection = Test-NetConnection -ComputerName "localhost" -Port 5900 -WarningAction SilentlyContinue[span_103](end_span)
            [span_104](start_span)if ($tcpConnection.TcpTestSucceeded) {[span_104](end_span)
              try {
                $vncTest = New-Object System.Net.Sockets.TcpClient
                $vncTest.Connect("127.0.0.1", 5900)
                [span_105](start_span)Write-Host "‚úÖ VNC server accepting connections"[span_105](end_span)
                [span_106](start_span)$vncTest.Close()[span_106](end_span)
                $vncReady = $true
                break
              } catch {
                [span_107](start_span)Write-Host "‚ùå VNC server not accepting connections: $_"[span_107](end_span)
              }
            }
          } catch {
            [span_108](start_span)Write-Host "‚ö†Ô∏è VNC connection test failed: $_"[span_108](end_span)
          }
          [span_109](start_span)Write-Host "‚è≥ Waiting for VNC server... ($i/30)"[span_109](end_span)
          [span_110](start_span)Start-Sleep -Seconds 2[span_110](end_span)
        }
        
        if (-not $vncReady) {
          [span_111](start_span)Write-Host "‚ùå VNC server not ready, exiting..."[span_111](end_span)
          [span_112](start_span)exit 1[span_112](end_span)
        }
        
        [span_113](start_span)Write-Host "üåê Retrieving Cloudflared URL for VNC..."[span_113](end_span)
        [span_114](start_span)$maxAttempts = 180[span_114](end_span)
        $attempt = 0
        $cloudflaredVncUrl = ""
        do {
          $attempt++
          [span_115](start_span)Start-Sleep -Seconds 3[span_115](end_span)
          if (Test-Path "cloudflared_vnc.log") {
            try {
              [span_116](start_span)$logContent = Get-Content "cloudflared_vnc.log" -Raw -ErrorAction SilentlyContinue[span_116](end_span)
              [span_117](start_span)if ($logContent -match 'https://[a-zA-Z0-9-]+\.trycloudflare\.com') {[span_117](end_span)
                [span_118](start_span)$cloudflaredVncUrl = $matches[0][span_118](end_span)
                [span_119](start_span)Write-Host "‚úÖ Found VNC Cloudflared URL: $cloudflaredVncUrl"[span_119](end_span)
                [span_120](start_span)break[span_120](end_span)
              }
            } catch {}
          }
        } while ($attempt -lt $maxAttempts)
        
        Write-Host "üåê Retrieving Cloudflared URL for Sunshine..."
        $cloudflaredSunshineUrl = ""
        $attempt = 0
        do {
          $attempt++
          Start-Sleep -Seconds 3
          if (Test-Path "cloudflared_sunshine.log") {
            try {
              $logContent = Get-Content "cloudflared_sunshine.log" -Raw -ErrorAction SilentlyContinue
              if ($logContent -match 'tcp://[a-zA-Z0-9-]+\.
          
          Write-Host "üöÄ Starting websockify..."
          Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru
          Start-Sleep -Seconds 15
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
          
          Write-Host "üì• Installing Cloudflared..."
          Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe" -TimeoutSec 60
          Write-Host "‚úÖ Cloudflared downloaded"
          
          Write-Host "üåê Starting Cloudflared tunnel..."
          Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared.log" -WindowStyle Hidden
          Start-Sleep -Seconds 40
          Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
          
          Write-Host "üöÄ Checking noVNC and retrieving Cloudflared URL..."
          
          Write-Host "üîç Checking for port 5900 and 6080 conflicts..."
          netstat -aon | FindStr :5900 | Write-Host
          netstat -aon | FindStr :6080 | Write-Host
          
          Write-Host "üîç Checking VNC and websockify processes..."
          Get-Process -Name "tvnserver" -ErrorAction SilentlyContinue | Format-Table -Property Name, Id, StartTime
          Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*websockify*" } | Format-Table -Property Name, Id, StartTime
          
          $vncReady = $false
          for ($i = 1; $i -le 30; $i++) {
            try {
              $tcpConnection = Test-NetConnection -ComputerName "localhost" -Port 5900 -WarningAction SilentlyContinue
              if ($tcpConnection.TcpTestSucceeded) {
                try {
                  $vncTest = New-Object System.Net.Sockets.TcpClient
                  $vncTest.Connect("127.0.0.1", 5900)
                  Write-Host "‚úÖ VNC server accepting connections"
                  $vncTest.Close()
                  $vncReady = $true
                  break
                } catch {
                  Write-Host "‚ùå VNC server not accepting connections: $_"
                  Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
                }
              }
            } catch {
              Write-Host "‚ö†Ô∏è VNC connection test failed: $_"
            }
            Write-Host "‚è≥ Waiting for VNC server... ($i/30)"
            
            if ($i % 10 -eq 0) {
              Write-Host "üîÑ Restarting VNC server..."
              Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Start-Process -FilePath "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run -localhost no" -WindowStyle Hidden -RedirectStandardOutput "vnc_start.log" -RedirectStandardError "vnc_error.log"
              Start-Sleep -Seconds 40
              Get-Content "vnc_start.log" -ErrorAction SilentlyContinue | Write-Host
              Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
            }
            Start-Sleep -Seconds 2
          }
          
          if (-not $vncReady) {
            Write-Host "‚ùå VNC server not ready, exiting..."
            Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
            exit 1
          }
          
          $websockifyReady = $false
          for ($i = 1; $i -le 3; $i++) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:6080/vnc.html" -TimeoutSec 5 -UseBasicParsing -ErrorAction Stop
              Write-Host "‚úÖ noVNC web interface accessible"
              $websockifyReady = $true
              break
            } catch {
              Write-Host "‚ö†Ô∏è noVNC check failed (attempt $i/3): $_"
              Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
              Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
              Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru
              Start-Sleep -Seconds 15
            }
          }
          
          if (-not $websockifyReady) {
            Write-Host "‚ùå Failed to start noVNC, exiting..."
            Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
            Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
            exit 1
          }
          
          Write-Host "üåê Retrieving Cloudflared URL..."
          $maxAttempts = 180
          $attempt = 0
          $cloudflaredUrl = ""
          
          do {
            $attempt++
            Write-Host "üîÑ Checking Cloudflared URL (attempt $attempt/$maxAttempts)"
            Start-Sleep -Seconds 3
            
            if (Test-Path "cloudflared.log") {
              try {
                $logContent = Get-Content "cloudflared.log" -Raw -ErrorAction SilentlyContinue
                if ($logContent -match 'https://[a-zA-Z0-9-]+\.trycloudflare\.com') {
                  $cloudflaredUrl = $matches[0]
                  Write-Host "‚úÖ Found Cloudflared URL: $cloudflaredUrl"
                  break
                }
              } catch {
                Write-Host "‚ö†Ô∏è Error reading cloudflared.log: $_"
              }
            }
            
            if ($attempt % 20 -eq 0) {
              Write-Host "üîÑ Restarting Cloudflared..."
              Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared.log" -WindowStyle Hidden
              Start-Sleep -Seconds 40
              Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
            }
          } while ($attempt -lt $maxAttempts)
          
          if ($cloudflaredUrl) {
            $remoteLink = "$cloudflaredUrl/vnc.html"
            Write-Host "üåå Remote VNC URL: $remoteLink"
            
            $remoteLink | Out-File -FilePath "remote-link.txt" -Encoding UTF8 -NoNewline
            
            try {
              git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git config --global user.name "github-actions[bot]"
              git add remote-link.txt
              git commit -m "üîó Updated remote-link.txt - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
              git push origin main --force-with-lease
              Write-Host "‚úÖ Remote link committed"
            } catch {
              Write-Host "‚ö†Ô∏è Failed to commit remote-link.txt: $_"
            }
            
            try {
              $body = @{ github_token = "$env:GITHUB_TOKEN_VPS"; vnc_link = $remoteLink } | ConvertTo-Json
              Invoke-RestMethod -Uri "https://vps-github-datlohehe.vercel.app/api/vpsuser" -Method Post -Body $body -ContentType "application/json" -TimeoutSec 20
              Write-Host "üì§ Remote VNC URL sent to server"
            } catch {
              Write-Host "‚ö†Ô∏è Failed to send remote VNC URL: $_"
            }
          } else {
            Write-Host "‚ùå Failed to retrieve Cloudflared URL"
            "TUNNEL_FAILED_$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath "remote-link.txt" -Encoding UTF8 -NoNewline
            
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git add remote-link.txt
            git commit -m "‚ùå Tunnel failed - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
            git push origin main --force-with-lease
          }
        } catch {
          Write-Host "‚ö†Ô∏è Setup failed: $_"
          Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "pip_install.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "cloudflared.log" -ErrorAction SilentlyContinue | Write-Host
          exit 1
        }
        
        Write-Host "üöÄ VPS Session Started - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "üåå Access noVNC via remote-link.txt URL (Password: datlohehe)"
        
        mkdir -Force ".backup"
        
        $totalMinutes = 330
        $restartCheckpoint = 320
        $healthCheckInterval = 15
        $backupInterval = 60
        
        for ($i = 1; $i -le $totalMinutes; $i++) {
          $currentTime = Get-Date -Format 'HH:mm:ss'
          Write-Host "üü¢ VPS Running - Minute $i/$totalMinutes ($currentTime)"
          
          if ($i % $backupInterval -eq 0) {
            Write-Host "üíæ Creating backup at minute $i..."
            $filesToBackup = @()
            if (Test-Path "links") { $filesToBackup += "links" }
            if (Test-Path "remote-link.txt") { $filesToBackup += "remote-link.txt" }
            if (Test-Path "vnc_start.log") { $filesToBackup += "vnc_start.log" }
            if (Test-Path "vnc_error.log") { $filesToBackup += "vnc_error.log" }
            if (Test-Path "pip_install.log") { $filesToBackup += "pip_install.log" }
            if (Test-Path "websockify.log") { $filesToBackup += "websockify.log" }
            if (Test-Path "websockify_error.log") { $filesToBackup += "websockify_error.log" }
            if (Test-Path "cloudflared.log") { $filesToBackup += "cloudflared.log" }
            
            if ($filesToBackup.Count -gt 0) {
              try {
                $backupName = "vps-project-1757394723326_$(Get-Date -Format 'yyyyMMdd_HHmm').zip"
                Compress-Archive -Path $filesToBackup -DestinationPath ".backup/$backupName" -Force
                Write-Host "‚úÖ Backup created: $backupName"
                
                git add .backup/$backupName
                git commit -m "üíæ Backup - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
                git push origin main --force-with-lease
              } catch {
                Write-Host "‚ö†Ô∏è Backup failed: $_"
              }
            }
          }
          
          if ($i -eq $restartCheckpoint) {
            Write-Host "üîÅ Preparing restart in $($totalMinutes - $i) minutes..."
          }
          
          Start-Sleep -Seconds 60
        }
        
        Write-Host "‚è∞ VPS session completed. Preparing restart..."

    - name: üîÑ Auto Restart Workflow
      if: always()
      run: |
        $lockFile = "restart.lock"
        $currentTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
        
        "RESTART_$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath $lockFile -Encoding UTF8
        
        Write-Host "üîÅ Initiating workflow restart at $currentTime"
        
        try {
          Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
        } catch {
          Write-Host "‚ö†Ô∏è Process cleanup failed: $_"
        }
        
        Start-Sleep -Seconds 10
        
        try {
          $headers = @{ "Accept" = "application/vnd.github+json"; "Authorization" = "Bearer $env:GITHUB_TOKEN_VPS"; "Content-Type" = "application/json"; "X-GitHub-Api-Version" = "2022-11-28" }
          
          $payload = @{ event_type = "create-vps"; client_payload = @{ vps_name = "vps-project-1757394723326"; restart_time = $currentTime; auto_restart = $true } } | ConvertTo-Json -Depth 2
          
          Invoke-RestMethod -Uri "https://api.github.com/repos/gicloud99/vps-project-1757394723326/dispatches" -Method Post -Headers $headers -Body $payload -TimeoutSec 30
          Write-Host "‚úÖ Workflow restart triggered"
          
          git add $lockFile
          git commit -m "üîÑ Auto restart - $currentTime" --allow-empty
          git push origin main --force-with-lease
          
        } catch {
          Write-Host "‚ùå Restart failed: $_"
          Remove-Item $lockFile -Force -ErrorAction SilentlyContinue
          exit 1
        }
