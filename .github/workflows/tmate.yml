name: Create VPS with VNC and Sunshine-1

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

env:
  VPS_NAME: vps-project-1757394723326
  GITHUB_TOKEN_VPS: ${{ secrets.GH_TOKEN }}

jobs:
  deploy:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: write

    steps:
    - name: ‚¨áÔ∏è Checkout source
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: ‚öôÔ∏è Setup User + RDP
      run: |
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        net user datlohe Dat@123456 /add
        net localgroup administrators datlohe /add
        Write-Host "‚úÖ User: datlohe / Password: Dat@123456"

    - name: üñ•Ô∏è C√†i ƒë·∫∑t v√† ch·∫°y TightVNC, noVNC, Cloudflared
      shell: pwsh
      run: |
        Write-Host "üì• Installing TightVNC, noVNC, and Cloudflared..."
        
        try {
          Write-Host "üì• Installing TightVNC..."
          Invoke-WebRequest -Uri "https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi" -OutFile "tightvnc-setup.msi" -TimeoutSec 60
          Write-Host "‚úÖ TightVNC downloaded"
          
          Start-Process msiexec.exe -Wait -ArgumentList '/i tightvnc-setup.msi /quiet /norestart ADDLOCAL="Server" SERVER_REGISTER_AS_SERVICE=1 SERVER_ADD_FIREWALL_EXCEPTION=1 SET_USEVNCAUTHENTICATION=1 VALUE_OF_USEVNCAUTHENTICATION=1 SET_PASSWORD=datlohehe SET_ACCEPTHTTPCONNECTIONS=1 VALUE_OF_ACCEPTHTTPCONNECTIONS=1 SET_ALLOWLOOPBACK=1 VALUE_OF_ALLOWLOOPBACK=1'
          Write-Host "‚úÖ TightVNC installed"
          
          Write-Host "üîß Enabling loopback connections in TightVNC registry..."
          Set-ItemProperty -Path "HKLM:\SOFTWARE\TightVNC\Server" -Name "AllowLoopback" -Value 1 -ErrorAction SilentlyContinue
          
          Write-Host "üîç Stopping any existing tvnserver processes..."
          Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Stop-Service -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5
          
          Write-Host "üîç Checking for port 5900 conflicts..."
          $portCheck = netstat -aon | FindStr :5900
          if ($portCheck) {
            Write-Host "‚ö†Ô∏è Port 5900 is already in use: $portCheck"
            Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 5
          }
          
          Write-Host "üöÄ Starting TightVNC server..."
          Start-Process -FilePath "C:\Program Files\TightVNC\tvnserver.exe" -ArgumentList "-run -localhost no" -WindowStyle Hidden -RedirectStandardOutput "vnc_start.log" -RedirectStandardError "vnc_error.log"
          Start-Sleep -Seconds 40
          Get-Content "vnc_start.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "vnc_error.log" -ErrorAction SilentlyContinue | Write-Host
          
          netsh advfirewall firewall add rule name="Allow VNC 5900" dir=in action=allow protocol=TCP localport=5900
          netsh advfirewall firewall add rule name="Allow noVNC 6080" dir=in action=allow protocol=TCP localport=6080
          Write-Host "‚úÖ Firewall rules added"
          
          Write-Host "üì• Installing Python dependencies for noVNC and websockify..."
          Write-Host "üîç Checking Python and pip versions..."
          python --version | Write-Host
          python -m pip --version | Write-Host
          
          $maxPipAttempts = 5
          for ($i = 1; $i -le $maxPipAttempts; $i++) {
            try {
              python -m pip install --upgrade pip --timeout 60 2>&1 | Out-File -FilePath "pip_install.log" -Append -Encoding UTF8
              pip install --force-reinstall numpy novnc websockify==0.13.0 --timeout 60 2>&1 | Out-File -FilePath "pip_install.log" -Append -Encoding UTF8
              Write-Host "‚úÖ Python dependencies installed"
              break
            } catch {
              Write-Host "‚ö†Ô∏è Pip install attempt $i/$maxPipAttempts failed: $_"
              Get-Content "pip_install.log" -ErrorAction SilentlyContinue | Write-Host
              if ($i -eq $maxPipAttempts) {
                Write-Host "‚ùå Failed to install Python dependencies"
                exit 1
              }
              Start-Sleep -Seconds 10
            }
          }
          
          Write-Host "üîç Checking noVNC installation via pip..."
          try {
            $novncInfo = pip show novnc
            Write-Host "üìú noVNC package info:"
            Write-Host $novncInfo
            $novncPath = ($novncInfo | Select-String "Location: (.*)").Matches.Groups[1].Value + "\novnc"
            if (Test-Path "$novncPath") {
              dir $novncPath -Recurse | Write-Host
              if (-not (Test-Path "$novncPath/vnc.html")) {
                Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"
                Write-Host "üîÑ Falling back to GitHub download..."
                $novncVersion = "v1.6.0"
                $maxDownloadAttempts = 5
                for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                  try {
                    Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                    Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                    $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                    Write-Host "üîó Using URL: $novncUrl"
                    $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                    Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                    Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                    Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                    Write-Host "‚úÖ noVNC downloaded and extracted"
                    $novncPath = "noVNC"
                    break
                  } catch {
                    Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                    if ($i -eq $maxDownloadAttempts) {
                      Write-Host "‚ùå Failed to download noVNC"
                      exit 1
                    }
                    Start-Sleep -Seconds 10
                  }
                }
              }
            } else {
              Write-Host "‚ùå noVNC directory does not exist, falling back to GitHub download..."
              $novncVersion = "v1.6.0"
              $maxDownloadAttempts = 5
              for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
                try {
                  Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                  Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                  $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                  Write-Host "üîó Using URL: $novncUrl"
                  $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                  Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                  Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                  Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                  Write-Host "‚úÖ noVNC downloaded and extracted"
                  $novncPath = "noVNC"
                  break
                } catch {
                  Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                  if ($i -eq $maxDownloadAttempts) {
                    Write-Host "‚ùå Failed to download noVNC"
                    exit 1
                  }
                  Start-Sleep -Seconds 10
                }
              }
            }
          } catch {
            Write-Host "‚ö†Ô∏è Failed to check noVNC package via pip, falling back to GitHub download..."
            $novncVersion = "v1.6.0"
            $maxDownloadAttempts = 5
            for ($i = 1; $i -le $maxDownloadAttempts; $i++) {
              try {
                Write-Host "üì• Downloading noVNC release $novncVersion (attempt $i/$maxDownloadAttempts)..."
                Remove-Item -Recurse -Force noVNC -ErrorAction SilentlyContinue
                $novncUrl = "https://github.com/novnc/noVNC/archive/refs/tags/$novncVersion.zip"
                Write-Host "üîó Using URL: $novncUrl"
                $response = Invoke-WebRequest -Uri $novncUrl -OutFile "noVNC.zip" -TimeoutSec 60 -PassThru
                Write-Host "‚ÑπÔ∏è HTTP Status: $($response.StatusCode) $($response.StatusDescription)"
                Expand-Archive -Path "noVNC.zip" -DestinationPath "." -Force
                Move-Item -Path "noVNC-$($novncVersion.Substring(1))" -Destination "noVNC" -Force
                Write-Host "‚úÖ noVNC downloaded and extracted"
                $novncPath = "noVNC"
                break
              } catch {
                Write-Host "‚ö†Ô∏è noVNC download attempt $i/$maxDownloadAttempts failed: $_"
                if ($i -eq $maxDownloadAttempts) {
                  Write-Host "‚ùå Failed to download noVNC"
                  exit 1
                }
                Start-Sleep -Seconds 10
              }
            }
          }
          
          Write-Host "üîç Checking noVNC directory structure..."
          if (-not (Test-Path "$novncPath/vnc.html")) {
            Write-Host "‚ùå noVNC directory is incomplete, vnc.html not found"
            exit 1
          }
          
          Write-Host "üîç Checking for port 6080 conflicts..."
          $portCheck = netstat -aon | FindStr :6080
          if ($portCheck) {
            Write-Host "‚ö†Ô∏è Port 6080 is already in use: $portCheck"
            Stop-Process -Id ($portCheck -split '\s+')[-1] -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 5
          }
          
          Write-Host "üöÄ Starting websockify..."
          Start-Process -FilePath "python" -ArgumentList "-m", "websockify", "6080", "127.0.0.1:5900", "--web", "$novncPath", "--verbose" -RedirectStandardOutput "websockify.log" -RedirectStandardError "websockify_error.log" -NoNewWindow -PassThru
          Start-Sleep -Seconds 15
          Get-Content "websockify.log" -ErrorAction SilentlyContinue | Write-Host
          Get-Content "websockify_error.log" -ErrorAction SilentlyContinue | Write-Host
          
          Write-Host "üì• Installing Cloudflared..."
          Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe" -TimeoutSec 60
          Write-Host "‚úÖ Cloudflared downloaded"
          
          Write-Host "üåê Starting Cloudflared tunnel for VNC..."
          Start-Process -FilePath "cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:6080", "--no-autoupdate", "--edge-ip-version", "auto", "--protocol", "http2", "--logfile", "cloudflared_vnc.log" -WindowStyle Hidden
          Start-Sleep -Seconds 40

        } catch {
          Write-Host "‚ö†Ô∏è VNC Setup failed: $_"
          exit 1
        }
        
    - name: üåû C√†i Sunshine (Portable)
      run: |
        Invoke-WebRequest -Uri "https://github.com/LizardByte/Sunshine/releases/download/v0.23.1/sunshine-windows.zip" -OutFile "sunshine.zip"
        Expand-Archive sunshine.zip -DestinationPath "C:\Sunshine" -Force
        cd C:\Sunshine
        Write-Host "‚úÖ Sunshine Portable ƒë√£ gi·∫£i n√©n!"
        
        New-NetFirewallRule -DisplayName "Sunshine TCP 47984" -Direction Inbound -Protocol TCP -LocalPort 47984 -Action Allow
        New-NetFirewallRule -DisplayName "Sunshine TCP 47989" -Direction Inbound -Protocol TCP -LocalPort 47989 -Action Allow
        New-NetFirewallRule -DisplayName "Sunshine UDP 48010" -Direction Inbound -Protocol UDP -LocalPort 48010 -Action Allow

        Start-Process -FilePath "C:\Sunshine\sunshine.exe" -ArgumentList "-config C:\Sunshine\config\sunshine.conf" -NoNewWindow
        
    - name: ‚òÅÔ∏è C√†i Cloudflared (Tunnel cho Sunshine)
      run: |
        if (-not (Test-Path ".\cloudflared.exe")) {
            Invoke-WebRequest https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe -OutFile cloudflared.exe
        }
        Write-Host "‚úÖ Cloudflared t·∫£i xong!"
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url tcp://localhost:47984" -NoNewWindow -RedirectStandardOutput "cloudflared_sunshine.log" -RedirectStandardError "cloudflared_sunshine_error.log"

    - name: ‚è≥ Gi·ªØ VPS ch·∫°y v√† l·∫•y links
      shell: pwsh
      run: |
        $totalMinutes = 330
        $restartCheckpoint = 320
        $healthCheckInterval = 15
        
        Write-Host "üöÄ VPS Session Started - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        
        $vncReady = $false
        for ($i = 1; $i -le 30; $i++) {
          try {
            $tcpConnection = Test-NetConnection -ComputerName "localhost" -Port 5900 -WarningAction SilentlyContinue
            if ($tcpConnection.TcpTestSucceeded) {
              try {
                $vncTest = New-Object System.Net.Sockets.TcpClient
                $vncTest.Connect("127.0.0.1", 5900)
                Write-Host "‚úÖ VNC server accepting connections"
                $vncTest.Close()
                $vncReady = $true
                break
              } catch {
                Write-Host "‚ùå VNC server not accepting connections: $_"
              }
            }
          } catch {
            Write-Host "‚ö†Ô∏è VNC connection test failed: $_"
          }
          Write-Host "‚è≥ Waiting for VNC server... ($i/30)"
          Start-Sleep -Seconds 2
        }
        
        if (-not $vncReady) {
          Write-Host "‚ùå VNC server not ready, exiting..."
          exit 1
        }
        
        Write-Host "üåê Retrieving Cloudflared URL for VNC..."
        $maxAttempts = 180
        $attempt = 0
        $cloudflaredVncUrl = ""
        do {
          $attempt++
          Start-Sleep -Seconds 3
          if (Test-Path "cloudflared_vnc.log") {
            try {
              $logContent = Get-Content "cloudflared_vnc.log" -Raw -ErrorAction SilentlyContinue
              if ($logContent -match 'https://[a-zA-Z0-9-]+\.trycloudflare\.com') {
                $cloudflaredVncUrl = $matches[0]
                Write-Host "‚úÖ Found VNC Cloudflared URL: $cloudflaredVncUrl"
                break
              }
            } catch {}
          }
        } while ($attempt -lt $maxAttempts)
        
        Write-Host "üåê Retrieving Cloudflared URL for Sunshine..."
        $cloudflaredSunshineUrl = ""
        $attempt = 0
        do {
          $attempt++
          Start-Sleep -Seconds 3
          if (Test-Path "cloudflared_sunshine.log") {
            try {
              $logContent = Get-Content "cloudflared_sunshine.log" -Raw -ErrorAction SilentlyContinue
              if ($logContent -match 'tcp://[a-zA-Z0-9-]+\.trycloudflare\.com:\d+') {
                $cloudflaredSunshineUrl = $matches[0]
                Write-Host "‚úÖ Found Sunshine Cloudflared URL: $cloudflaredSunshineUrl"
                break
              }
            } catch {}
          }
        } while ($attempt -lt $maxAttempts)

        $remoteVncLink = "$cloudflaredVncUrl/vnc.html"
        $remoteSunshineLink = $cloudflaredSunshineUrl

        Write-Host "üåå Remote VNC URL: $remoteVncLink (Password: datlohehe)"
        Write-Host "üéÆ Remote Sunshine URL for Moonlight: $remoteSunshineLink"

        $outputContent = "Remote VNC URL: $remoteVncLink (Password: datlohehe)`nRemote Sunshine URL for Moonlight: $remoteSunshineLink"
        $outputContent | Out-File -FilePath "remote-links.txt" -Encoding UTF8 -NoNewline

        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add remote-links.txt
        git commit -m "üîó Updated remote links - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
        git push origin main --force-with-lease

        for ($i = 1; $i -le $totalMinutes; $i++) {
          Write-Host "üü¢ VPS Running - Minute $i/$totalMinutes"
          Start-Sleep -Seconds 60
        }
        
        Write-Host "‚è∞ VPS session completed. Preparing restart..."

    - name: üîÑ Auto Restart Workflow
      if: always()
      run: |
        $lockFile = "restart.lock"
        "RESTART_$(Get-Date -Format 'yyyyMMdd_HHmmss')" | Out-File -FilePath $lockFile -Encoding UTF8
        
        Write-Host "üîÅ Initiating workflow restart..."
        
        try {
          Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "python" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "tvnserver" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "sunshine" -Force -ErrorAction SilentlyContinue
        } catch {}
        
        Start-Sleep -Seconds 10
        
        try {
          $headers = @{ "Accept" = "application/vnd.github+json"; "Authorization" = "Bearer $env:GITHUB_TOKEN_VPS"; "Content-Type" = "application/json"; "X-GitHub-Api-Version" = "2022-11-28" }
          
          $payload = @{ event_type = "create-vps"; client_payload = @{ vps_name = "vps-project-1757394723326"; restart_time = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'); auto_restart = $true } } | ConvertTo-Json -Depth 2
          
          Invoke-RestMethod -Uri "https://api.github.com/repos/gicloud99/vps-project-1757394723326/dispatches" -Method Post -Headers $headers -Body $payload -TimeoutSec 30
          Write-Host "‚úÖ Workflow restart triggered"
          
          git add $lockFile
          git commit -m "üîÑ Auto restart - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" --allow-empty
          git push origin main --force-with-lease
          
        } catch {
          Write-Host "‚ùå Restart failed: $_"
          Remove-Item $lockFile -Force -ErrorAction SilentlyContinue
          exit 1
        }
